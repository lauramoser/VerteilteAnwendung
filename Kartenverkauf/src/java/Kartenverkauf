package de.demo;

import static javax.ws.rs.core.MediaType.*;
import java.sql.*;
import javax.inject.Singleton;
import javax.sql.DataSource;
import javax.ws.rs.*;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;

import javax.inject.Singleton;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.ext.ExceptionMapper;

import com.mysql.cj.jdbc.MysqlDataSource;

@Singleton
@Path("/kartenverkauf")

public class Kartenverkauf implements ExceptionMapper<Throwable> {

	DataSource ds;

    public Kartenverkauf() throws SQLException {
        MysqlDataSource mdatasource = new MysqlDataSource();
        mdatasource.setURL("jdbc:mysql://localhost:3306/Kartenverkauf");
        mdatasource.setUser("admin");
        mdatasource.setPassword("passwort");
        DataSource datasource = (DataSource) mdatasource;
        ds = datasource;
    }

	@Path("/getSeat")
	@GET
	@Produces({ APPLICATION_JSON })
	public Seat getSeat(@QueryParam("nr") int nr) throws SQLException {
		Connection connection = ds.getConnection();
		Statement statement = connection.createStatement();
		ResultSet resultset = statement.executeQuery("SELECT * FROM seats WHERE id =" + nr);
		resultset.next();
		Seat wantedSeat = new Seat(resultset.getInt("id"),resultset.getString("status"), resultset.getString("reservationname"));
		
		return wantedSeat;
		
	}

	@Path("/getSeats")
	@GET
	@Produces({ APPLICATION_JSON })
	 public Seat[] getSeats() throws SQLException {
        Connection connection = ds.getConnection();
        Statement statement = connection.createStatement();
        ResultSet resultset = statement.executeQuery("SELECT * FROM seats");
        Seat[] seats = new Seat[100];
        
        for (int i = 0; i < 100; i++) {
        	resultset.next();
        	Seat seat = new Seat(resultset.getInt("id"),resultset.getString("status"), resultset.getString("reservationname"));
            seats[i] = seat;
        }
        return seats;
    }

	
	@Path("/kaufe")
	@GET
	@Produces({ TEXT_PLAIN })
	public String kaufe(@QueryParam("nr") int nr, @QueryParam("name") String name) throws Exception {
		if (!getSeat(nr).status.equals("free"))
			throw new KartenverkaufException("this seat is already taken");

		try (Connection connection = ds.getConnection()) {
			Statement statement = connection.createStatement();
			statement.executeUpdate("UPDATE seats SET status = 'sold' WHERE id =" + nr);
			statement.executeUpdate("UPDATE `seats` SET `reservationname`= '" + name + "' WHERE `id`=" + nr + ";");
			System.out.println("Buying was successful");
		}
		
		return("OK");
	}

	@Path("/reservieren")
	@GET
	@Produces({ TEXT_PLAIN })
	public String reservieren(@QueryParam("nr") int nr, @QueryParam("name") String name) throws Exception { 
		if (!getSeat(nr).status.equals("free"))
			throw new KartenverkaufException("this seat is already taken");

		try (Connection connection = ds.getConnection()) {
			Statement statement = connection.createStatement();
			statement.executeUpdate("UPDATE seats SET status = 'reserved' WHERE id =" + nr);
			statement.executeUpdate("UPDATE `seats` SET `reservationname`= '" + name + "' WHERE `id`=" + nr + ";");
			System.out.println("Reservation was successful");
		}
		
		return("OK");
	}

	@Path("/kaufeReserviert")
	@GET
	@Produces({ TEXT_PLAIN  })
	public String kaufeReserviert(@QueryParam("nr") int nr, @QueryParam("name") String name) throws Exception {
		if (!getSeat(nr).reservationname.equals(name))
			throw new KartenverkaufException("this seat has another reservationname");

		try (Connection connection = ds.getConnection()) {
			Statement statement = connection.createStatement();
			statement.executeUpdate("UPDATE seats SET status = 'sold' WHERE id =" + nr);
			System.out.println("Buying was successful");
		}
		
		return("OK");
	}

	@Path("/stornieren")
	@GET
	@Produces({ TEXT_PLAIN  })
	public String stornieren(@QueryParam("nr") int nr) throws Exception {
		if (getSeat(nr).status.equals("free"))
			throw new KartenverkaufException("this seat is already free");

		try (Connection connection = ds.getConnection()) {
			Statement statement = connection.createStatement();
			statement.executeUpdate("UPDATE seats SET status = 'free' WHERE id =" + nr);
			statement.executeUpdate("UPDATE seats SET reservationname = '' WHERE id =" + nr);
			System.out.println("Canceling was successful");
		}
		
		return("OK");
	}
 
	@Path("/hebeReservierungenAuf")
	@GET
	@Produces({ TEXT_PLAIN   })
	public String hebeReservierungenAuf() throws SQLException {
		Connection connection = ds.getConnection();
		Statement statement = connection.createStatement();
		statement.executeUpdate("UPDATE seats SET status = 'free' WHERE status != 'free'");
		statement.executeUpdate("UPDATE reservationacceptance SET reservationacceptance = false");
		statement.executeUpdate("UPDATE seats SET reservationname = '' WHERE reservationname != ''");
		System.out.println("All seats are free");
		
		return("OK");
	}

	@Path("/initialisieren")
	@GET
	@Produces({ TEXT_PLAIN  })
	public String initialisieren() throws SQLException {
		Connection connection = ds.getConnection();
		Statement statement = connection.createStatement();
		statement.executeUpdate("UPDATE seats SET status = 'free' WHERE status != 'free'");
		statement.executeUpdate("UPDATE seats SET reservationname = '' WHERE reservationname != ''");
		statement.executeUpdate("UPDATE reservationacceptance SET reservationacceptance = true");
		System.out.println("Initialization was successful");
		
		return("OK");
	}
	
	@Path("/reserveboolean")
	@GET
	@Produces({ TEXT_PLAIN })
	public String getreservationacceptance() throws SQLException {
		Connection connection = ds.getConnection();
		Statement statement = connection.createStatement();
		ResultSet resultset = statement.executeQuery("SELECT * FROM reservationacceptance");
		resultset.next();

		if(resultset.getInt("reservationacceptance") == 1) {
			System.out.println("Reservations are still accepted");
			return "true";
		}else {
			System.out.println("Reservations can't be accepted anymore");
			return "false";
		}
	}
	
	


	@Override
	public Response toResponse(Throwable exception) {
		exception.printStackTrace();
		System.out.println("REST-Exception: " + exception.getMessage());
		return Response.status(500).entity(exception.getMessage()).type("text/plain").build();
	}
}
